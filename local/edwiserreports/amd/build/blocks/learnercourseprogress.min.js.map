{"version":3,"sources":["blocks/learnercourseprogress.js"],"names":["define","$","ApexCharts","Common","CFG","chart","filter","course","dir","attr","rtl","barChartDefault","series","type","height","toolbar","show","tools","download","reset","zoom","enabled","tooltip","enabledOnSeries","undefined","shared","followCursor","intersect","inverseOrder","fillSeriesColor","onDatasetHover","highlightDataSeries","marker","items","display","fixed","position","offsetX","offsetY","y","title","grid","borderColor","dataLabels","xaxis","categories","labels","hideOverlappingLabels","trim","rotate","minHeight","maxHeight","legend","horizontalAlign","itemMargin","horizontal","vertical","noData","text","M","util","get_string","colors","getColorTheme","donutChartDefault","formatter","seriesName","opts","w","globals","seriesIndex","SELECTOR","PANEL","COURSE","GRAPH","PROMISE","GET_COURSEPROGRESS","ajax","url","requestUrl","requestType","dataType","requestDataType","data","action","secret","local_edwiserreports","lang","JSON","stringify","loadGraph","loader","done","response","Object","assign","yaxis","max","progress","name","length","find","custom","_ref","dataPointIndex","value","label","config","single","plural","color","concat","graph","destroy","get","render","setTimeout","hide","renderGraph","fail","exception","init","invalidUser","select2","on","courseid","parseInt","this","val","setInterval","width","newPosition","updateOptions"],"mappings":"AAAA,aAwBAA,OAAO,oDAAqD,CAAC,SAAU,yCAA0C,8BAA+B,qCAAsC,gCAAiC,SAAUC,EAAGC,EAAYC,EAAQC,GAItP,IAAIC,EAAQ,KAKRC,EAAS,CACXC,OAAQ,EACRC,IAAKP,EAAE,QAAQQ,KAAK,OACpBC,IAA8B,OAAzBT,EAAE,QAAQQ,KAAK,OAAkB,EAAI,GAMxCE,EAAkB,CACpBC,OAAQ,GACRP,MAAO,CACLQ,KAAM,MACNC,OAAQ,IACRC,QAAS,CACPC,MAAM,EACNC,MAAO,CACLC,UAAU,EACVC,MAAO,kCAGXC,KAAM,CACJC,SAAS,IAGbC,QAAS,CACPD,SAAS,EACTE,qBAAiBC,EACjBC,QAAQ,EACRC,cAAc,EACdC,WAAW,EACXC,cAAc,EACdC,iBAAiB,EACjBC,eAAgB,CACdC,qBAAqB,GAEvBC,OAAQ,CACNhB,MAAM,GAERiB,MAAO,CACLC,QAAS,QAEXC,MAAO,CACLd,SAAS,EACTe,SAAU,WACVC,QAAS,EACTC,QAAS,GAEXC,EAAG,CACDC,MAAO,KAGXC,KAAM,CACJC,YAAa,WAEfC,WAAY,CACVtB,SAAS,GAEXuB,MAAO,CACLC,WAAY,KACZC,OAAQ,CACNC,uBAAuB,EACvBC,MAAM,EACNC,OAAQ,IACRC,UAAW,IACXC,UAAW,MAMfC,OAAQ,CACNhB,SAAU,MACViB,gBAAiB,OACjBf,QAAS,MACTgB,WAAY,CACVC,WAAY,GACZC,SAAU,IAGdC,OAAQ,CACNC,KAAMC,EAAEC,KAAKC,WAAW,cAAe,yBAEzCC,OAAQ,CAAC1D,EAAI2D,gBAAgB,KAM3B3B,EAAW9B,EAAOI,IAAM,OAAS,QAKjCsD,EAAoB,CACtB3D,MAAO,CACLQ,KAAM,QACNC,OAAQ,KAEVsC,OAAQ,CACNhB,SAAUA,EACV6B,UAAW,SAAmBC,EAAYC,GACxC,MAAO,CAACD,EAAa,KAAOC,EAAKC,EAAEC,QAAQzD,OAAOuD,EAAKG,gBAG3D3B,WAAY,CACVtB,SAAS,GAEXoC,OAAQ,CACNC,KAAMC,EAAEC,KAAKC,WAAW,cAAe,yBAEzCC,OAAQ1D,EAAI2D,iBAMVQ,EAAW,CACbC,MAAO,8BACPC,OAAQ,uCACRC,MAAO,2CAMLC,EAAU,CAMZC,mBAAoB,SAA4BtE,GAC9C,OAAOL,EAAE4E,KAAK,CACZC,IAAK1E,EAAI2E,WACTlE,KAAMT,EAAI4E,YACVC,SAAU7E,EAAI8E,gBACdC,KAAM,CACJC,OAAQ,4CACRC,OAAQ1B,EAAE2B,qBAAqBD,OAC/BE,KAAMtF,EAAE,QAAQQ,KAAK,QACrB0E,KAAMK,KAAKC,UAAU,CACnBnF,OAAQA,SAUlB,SAASoF,IACP,IAAIP,EACJhF,EAAOwF,OAAO3E,KAAKuD,EAASC,OAiB5BG,EAAQC,mBAAmBtE,GAAQsF,KAAK,SAAUC,GAC3B,GAAjBvF,EAAOC,SACT4E,EAAOW,OAAOC,OAAO,GAAIpF,IACpBqF,MAAQ,CACXC,IAAK,IACLnD,OAAQ,CACNmB,UAAW,SAAmBiC,GAC5B,OAAOA,EAAW,OAIxBf,EAAKvC,MAAMC,WAAagD,EAAS/C,OACjCqC,EAAKvE,OAAS,CAAC,CACbuF,KAAMxC,EAAEC,KAAKC,WAAW,iBAAkB,wBAC1CsB,KAAMU,EAASK,WAEjBf,EAAK9E,MAAMU,QAAQC,KAAO6E,EAAS/C,OAAOsD,OAAS,GACnDjB,EAAK9E,MAAMe,KAAKC,QAAUwE,EAAS/C,OAAOsD,OAAS,GACnDjB,EAAK7D,QAAQiB,EAAEC,MAAMyB,UAAY,SAAUzB,GACzC,OAAOmB,EAAEC,KAAKC,WAAW,WAAY,wBAA0B,MAEjE5D,EAAEsE,EAASC,OAAO6B,KAAK,eAAe5F,KAAK,iBAAkB,UAE7D0E,EAAOW,OAAOC,OAAO,GAAI/B,IACpBlB,OAAS+C,EAAS/C,OACvBqC,EAAKvE,OAASiF,EAASK,SACvBf,EAAK7D,QAAU,CACbgF,OAAQ,SAAgBC,GACtB,IAAI3F,EAAS2F,EAAK3F,OAChB0D,EAAciC,EAAKjC,YAEnBF,GADiBmC,EAAKC,eAClBD,EAAKnC,GACPqC,EAAQ7F,EAAO0D,GACfoC,EAAQtC,EAAEuC,OAAO7D,OAAOwB,GACxBhD,EAAUmF,EAAQ,EAAIZ,EAASvE,QAAQsF,OAASf,EAASvE,QAAQuF,OACjEC,EAAQ1C,EAAEuC,OAAO7C,OAAOQ,GAC5B,MAAO,mDAAsDyC,OAAOD,EAAO,8EAAiFC,OAAOL,EAAO,mFAAqFK,OAAON,EAAO,KAAKM,OAAOzF,EAAS,qDAGtSrB,EAAEsE,EAASC,OAAO6B,KAAK,eAAe5F,KAAK,iBAAkB,UAjDjE,SAAqBuG,EAAO7B,GACZ,OAAV9E,GACFA,EAAM4G,WAER5G,EAAQ,IAAIH,EAAW8G,EAAME,IAAI,GAAI/B,IAC/BgC,SACNC,WAAW,WACTjH,EAAOwF,OAAO0B,KAAK9C,EAASC,QAC3B,KA2CH8C,CAAYrH,EAAEsE,EAASC,OAAO6B,KAAK9B,EAASG,OAAQS,KACnDoC,KAAK,SAAUC,GAChBrH,EAAOwF,OAAO0B,KAAK9C,EAASC,SAoDhC,MAAO,CACLiD,KATF,SAAcC,GACoB,GAA5BzH,EAAEsE,EAASC,OAAO4B,SAGtBnG,EAAEsE,EAASC,OAAO6B,KAAK,iBAAiBsB,UAvCxC1H,EAAE,QAAQ2H,GAAG,SAAU,GAAGb,OAAOxC,EAASC,MAAO,KAAKuC,OAAOxC,EAASE,QAAS,WAC7E,IAAIoD,EAAWC,SAAS7H,EAAE8H,MAAMC,OAChC1H,EAAOC,OAASsH,EAGhBnC,MAIFuC,YAAY,WACV,GAAc,OAAV5H,EAAJ,CAGA,IAAI6H,EAAQjI,EAAEsE,EAASC,OAAO6B,KAAK9B,EAASG,OAAOwD,QAE/CC,EAAcD,GAAS,IAAM,QAAU,SAC/B,OAFDjI,EAAE,QAAQQ,KAAK,SAGxB0H,EAAcD,GAAS,IAAM,OAAS,UAEpCC,GAAe/F,IAGnBA,EAAW+F,EACX9H,EAAM+H,cAAc,CAClBhF,OAAQ,CACNhB,SAAUA,QAGb,KAaHsD","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * Block service call and rendering defined in this file.\n *\n * @package     local_edwiserreports\n * @author      Yogesh Shirsath\n * @copyright   2022 wisdmlabs <support@wisdmlabs.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine('local_edwiserreports/blocks/learnercourseprogress', [\n    'jquery',\n    'local_edwiserreports/vendor/apexcharts',\n    'local_edwiserreports/common',\n    'local_edwiserreports/defaultconfig',\n    'local_edwiserreports/select2'\n], function(\n    $,\n    ApexCharts,\n    Common,\n    CFG\n) {\n    /**\n     * Charts list.\n     */\n    var chart = null;\n\n    \n\n    /**\n     * Filter for ajax.\n     */\n    var filter = {\n        course: 0,\n        dir: $('html').attr('dir'),\n        rtl: $('html').attr('dir') == 'rtl' ? 1 : 0\n    };\n\n    /**\n     * Bar chart default config.\n     */\n    const barChartDefault = {\n        series: [],\n        chart: {\n            type: 'bar',\n            height: 350,\n            toolbar: {\n                show: false,\n                tools: {\n                    download: false,\n                    reset: '<i class=\"fa fa-refresh\"></i>'\n                }\n            },\n            zoom: {\n                enabled: false\n            }\n        },\n        tooltip: {\n            enabled: true,\n            enabledOnSeries: undefined,\n            shared: true,\n            followCursor: false,\n            intersect: false,\n            inverseOrder: false,\n            fillSeriesColor: false,\n            onDatasetHover: {\n                highlightDataSeries: false,\n            },\n            marker: {\n                show: true\n            },\n            items: {\n                display: 'flex'\n            },\n            fixed: {\n                enabled: false,\n                position: 'topRight',\n                offsetX: 0,\n                offsetY: 0,\n            },\n            y: {\n                title: {}\n            }\n        },\n        grid: {\n            borderColor: '#e7e7e7'\n        },\n        dataLabels: {\n            enabled: false\n        },\n        xaxis: {\n            categories: null,\n            labels: {\n                hideOverlappingLabels: true,\n                trim: true,\n                rotate: 300,\n                minHeight: 100,\n                maxHeight: 120,\n            }\n        },\n        // xaxis: {\n        //     categories: null,\n        // },\n        legend: {\n            position: 'top',\n            horizontalAlign: 'left',\n            offsetY: '-20',\n            itemMargin: {\n                horizontal: 10,\n                vertical: 0\n            },\n        },\n        noData: {\n            text: M.util.get_string('nographdata', 'local_edwiserreports')\n        },\n        colors: [CFG.getColorTheme()[2]]\n    };\n\n    /**\n     * Legend position.\n     */\n    var position = filter.rtl ? 'left' : 'right';\n\n    /**\n     * Donut chart default config.\n     */\n    const donutChartDefault = {\n        chart: {\n            type: 'donut',\n            height: 350\n        },\n        legend: {\n            position: position,\n            formatter: function(seriesName, opts) {\n                return [seriesName + \": \" + opts.w.globals.series[opts.seriesIndex]]\n            }\n        },\n        dataLabels: {\n            enabled: false\n        },\n        noData: {\n            text: M.util.get_string('nographdata', 'local_edwiserreports')\n        },\n        colors: CFG.getColorTheme()\n    };\n\n    /**\n     * Selectors list.\n     */\n    var SELECTOR = {\n        PANEL: '#learnercourseprogressblock',\n        COURSE: '#learnercourseprogress-course-select',\n        GRAPH: '#apex-chart-learnercourseprogress-block'\n    };\n\n    /**\n     * All promises.\n     */\n    var PROMISE = {\n        /**\n         * Get course progress using filters.\n         * @param {Object} filter Filter data\n         * @returns {PROMISE}\n         */\n        GET_COURSEPROGRESS: function(filter) {\n            return $.ajax({\n                url: CFG.requestUrl,\n                type: CFG.requestType,\n                dataType: CFG.requestDataType,\n                data: {\n                    action: 'get_learnercourseprogress_graph_data_ajax',\n                    secret: M.local_edwiserreports.secret,\n                    lang: $('html').attr('lang'),\n                    data: JSON.stringify({\n                        filter: filter\n                    })\n                },\n            });\n        }\n    }\n\n    /**\n     * Load graph\n     */\n    function loadGraph() {\n        let data;\n        Common.loader.show(SELECTOR.PANEL);\n\n        /**\n         * Render graph.\n         * @param {DOM} graph Graph element\n         * @param {Object} data Graph data\n         */\n        function renderGraph(graph, data) {\n            if (chart !== null) {\n                chart.destroy();\n            }\n            chart = new ApexCharts(graph.get(0), data);\n            chart.render();\n            setTimeout(function() {\n                Common.loader.hide(SELECTOR.PANEL);\n            }, 1000);\n        }\n\n        PROMISE.GET_COURSEPROGRESS(filter)\n            .done(function(response) {\n                if (filter.course == 0) {\n                    data = Object.assign({}, barChartDefault);\n                    data.yaxis = {\n                        max: 100,\n                        labels: {\n                            formatter: (progress) => {\n                                return progress + '%';\n                            }\n                        }\n                    };\n                    data.xaxis.categories = response.labels;\n                    data.series = [{\n                        name: M.util.get_string('courseprogress', 'local_edwiserreports'),\n                        data: response.progress,\n                    }];\n                    data.chart.toolbar.show = response.labels.length > 30;\n                    data.chart.zoom.enabled = response.labels.length > 30;\n                    data.tooltip.y.title.formatter = (title) => {\n                        return M.util.get_string('progress', 'local_edwiserreports') + ': ';\n                    };\n                    $(SELECTOR.PANEL).find('.panel-body').attr('data-charttype', 'bar');\n                } else {\n                    data = Object.assign({}, donutChartDefault);\n                    data.labels = response.labels;\n                    data.series = response.progress;\n                    data.tooltip = {\n                        custom: function({ series, seriesIndex, dataPointIndex, w }) {\n                            let value = series[seriesIndex];\n                            let label = w.config.labels[seriesIndex];\n                            let tooltip = value < 2 ? response.tooltip.single : response.tooltip.plural;\n                            let color = w.config.colors[seriesIndex];\n                            return `<div class=\"custom-donut-tooltip\" style=\"color: ${color};\">\n                                    <span style=\"font-weight: 500;\"> ${label}:</span>\n                                    <span style=\"font-weight: 700;\"> ${value} ${tooltip}</span>\n                                </div>`;\n                        }\n                    }\n                    $(SELECTOR.PANEL).find('.panel-body').attr('data-charttype', 'donut');\n                }\n                renderGraph($(SELECTOR.PANEL).find(SELECTOR.GRAPH), data);\n            }).fail(function(exception) {\n                Common.loader.hide(SELECTOR.PANEL);\n            });\n    }\n\n    /**\n     * Initialize event listeners.\n     */\n    function initEvents() {\n\n        // Course selector listener.\n        $('body').on('change', `${SELECTOR.PANEL} ${SELECTOR.COURSE}`, function() {\n            let courseid = parseInt($(this).val());\n            filter.course = courseid;\n\n            // Load graph data.\n            loadGraph();\n        });\n\n        // Handling legend position based on width.\n        setInterval(function() {\n            if (chart === null) {\n                return;\n            }\n            let width = $(SELECTOR.PANEL).find(SELECTOR.GRAPH).width();\n            var attr = $('html').attr('dir');\n            let newPosition = width >= 400 ? 'right' : 'bottom';\n            if (attr == 'rtl') {\n                newPosition = width >= 400 ? 'left' : 'bottom';\n            }\n\n\n            if (newPosition == position) {\n                return;\n            }\n            position = newPosition;\n            chart.updateOptions({\n                legend: {\n                    position: position\n                }\n            })\n        }, 1000);\n\n    }\n\n    /**\n     * Initialize\n     * @param {function} invalidUser Callback function\n     */\n    function init(invalidUser) {\n        if ($(SELECTOR.PANEL).length == 0) {\n            return;\n        }\n        $(SELECTOR.PANEL).find('.singleselect').select2();\n        initEvents();\n\n        loadGraph();\n    }\n    return {\n        init: init\n    };\n});\n"],"file":"learnercourseprogress.min.js"}
