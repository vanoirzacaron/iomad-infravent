{"version":3,"sources":["blocks/courseactivitystatus.js"],"names":["define","$","ApexCharts","common","CFG","EdwiserReportsEvents","blockName","SELECTOR","PANEL","INSIGHT","FORMFILTER","GRAPH","COHORT","COURSE","GROUP","STUDENT","PROMISE","GET_COURSEACTIVITYSTATUS","filter","ajax","url","requestUrl","type","requestType","dataType","requestDataType","data","action","secret","M","local_edwiserreports","lang","attr","JSON","stringify","date","cohort","course","group","student","chart","lineChartDefault","series","id","height","dropShadow","enabled","color","top","left","blur","opacity","toolbar","show","tools","download","reset","zoom","markers","size","tooltip","enabledOnSeries","undefined","shared","followCursor","intersect","inverseOrder","fillSeriesColor","onDatasetHover","highlightDataSeries","y","formatter","title","items","display","fixed","position","offsetX","offsetY","stroke","curve","width","grid","borderColor","xaxis","categories","labels","hideOverlappingLabels","datetimeFormatter","year","month","day","hour","yaxis","val","index","toFixed","legend","horizontalAlign","itemMargin","horizontal","vertical","dataLabels","colors","getColorTheme","noData","text","util","get_string","renderGraph","graph","destroy","get","render","setTimeout","loader","hide","loadGraph","invalidUser","find","done","response","Object","assign","name","submissions","completions","dates","map","length","insight","fail","exception","reloadFilter","types","init","currentDate","select2","handleFilterSize","dateChange","on","concat","parseInt","this","document","EXPORTGRAPHPDF","graphElement","exportGraphPDF","EXPORTGRAPHJPEG","exportGraphJPEG","EXPORTGRAPHPNG","exportGraphPNG","EXPORTGRAPHSVG","exportGraphSVG","format","filename","animations"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * Block service call and rendering defined in this file.\n *\n * @package     local_edwiserreports\n * @copyright   2021 wisdmlabs <support@wisdmlabs.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n/* eslint-disable no-console */\ndefine('local_edwiserreports/blocks/courseactivitystatus', [\n    'jquery',\n    'local_edwiserreports/vendor/apexcharts',\n    'local_edwiserreports/common',\n    'local_edwiserreports/defaultconfig',\n    'local_edwiserreports/events'\n], function(\n    $,\n    ApexCharts,\n    common,\n    CFG,\n    EdwiserReportsEvents\n) {\n\n    /**\n     * Block name\n     */\n    let blockName = 'courseactivitystatusblock';\n    /**\n     * DOM element selectors list.\n     */\n    let SELECTOR = {\n        PANEL: '#courseactivitystatusblock',\n        INSIGHT: '#courseactivitystatusblock .insight',\n        FORMFILTER: '.download-links [name=\"filter\"]',\n        GRAPH: '#apex-chart-courseactivitystatus-block',\n        COHORT: '.cohort-select',\n        COURSE: '.course-select',\n        GROUP: '.group-select',\n        STUDENT: '.student-select'\n    };\n\n    let PROMISE = {\n        /**\n         * Get timespent on site using filters.\n         * @param {Object} filter Filter data\n         * @returns {PROMISE}\n         */\n        GET_COURSEACTIVITYSTATUS: function(filter) {\n            return $.ajax({\n                url: CFG.requestUrl,\n                type: CFG.requestType,\n                dataType: CFG.requestDataType,\n                data: {\n                    action: 'get_courseactivitystatus_graph_data_ajax',\n                    secret: M.local_edwiserreports.secret,\n                    lang: $('html').attr('lang'),\n                    data: JSON.stringify({\n                        filter: filter\n                    })\n                },\n            });\n        }\n    };\n\n    /**\n     * Filter for ajax.\n     */\n    let filter = {\n        date: null,\n        cohort: 0,\n        course: 0,\n        group: 0,\n        student: 0\n    };\n\n    /**\n     * Chart object.\n     */\n    let chart = null;\n\n    /**\n     * Line chart default config.\n     */\n    const lineChartDefault = {\n        series: [],\n        chart: {\n            id: 'courseactivitystatus',\n            type: 'line',\n            height: 350,\n            dropShadow: {\n                enabled: true,\n                color: '#000',\n                top: 18,\n                left: 7,\n                blur: 10,\n                opacity: 0.2\n            },\n            toolbar: {\n                show: false,\n                tools: {\n                    download: false,\n                    reset: '<i class=\"fa fa-refresh\"></i>'\n                }\n            },\n            zoom: {\n                enabled: false\n            }\n        },\n        markers: {\n            size: 0\n        },\n        tooltip: {\n            enabled: true,\n            enabledOnSeries: undefined,\n            shared: true,\n            followCursor: false,\n            intersect: false,\n            inverseOrder: false,\n            fillSeriesColor: false,\n            onDatasetHover: {\n                highlightDataSeries: false,\n            },\n            y: {\n                formatter: undefined,\n                title: {},\n            },\n            items: {\n                display: 'flex'\n            },\n            fixed: {\n                enabled: false,\n                position: 'topRight',\n                offsetX: 0,\n                offsetY: 0,\n            },\n        },\n        stroke: {\n            curve: 'smooth',\n            width: 2\n        },\n        grid: {\n            borderColor: '#e7e7e7'\n        },\n        xaxis: {\n            categories: null,\n            type: 'datetime',\n            labels: {\n                hideOverlappingLabels: true,\n                datetimeFormatter: {\n                    year: 'yyyy',\n                    month: 'MMM \\'yy',\n                    day: 'dd MMM',\n                    hour: ''\n                }\n            },\n            tooltip: {\n                enabled: false\n            }\n        },\n        yaxis: {\n            labels: {\n                formatter: function(val, index) {\n                    return val === undefined ? val : val.toFixed(0);\n                }\n            }\n        },\n        legend: {\n            position: 'top',\n            horizontalAlign: 'left',\n            offsetY: '-20',\n            itemMargin: {\n                horizontal: 10,\n                vertical: 0\n            },\n        },\n        dataLabels: {\n            enabled: false\n        },\n        colors: CFG.getColorTheme(),\n        noData: {\n            text: M.util.get_string('nographdata', 'local_edwiserreports')\n        }\n    };\n\n    /**\n     * Render graph.\n     * @param {DOM} graph Graph element\n     * @param {Object} data Graph data\n     */\n    function renderGraph(graph, data) {\n        if (chart !== null) {\n            chart.destroy();\n        }\n        chart = new ApexCharts(graph.get(0), data);\n        chart.render();\n        setTimeout(function() {\n            common.loader.hide(SELECTOR.PANEL);\n        }, 1000);\n    }\n\n    /**\n     * Load graph\n     */\n    function loadGraph(invalidUser) {\n        common.loader.show(SELECTOR.PANEL);\n\n        // Set export filter to download link.\n        $(SELECTOR.PANEL).find(SELECTOR.FORMFILTER).val(JSON.stringify(filter));\n\n        PROMISE.GET_COURSEACTIVITYSTATUS(filter)\n            .done(function(response) {\n                let data = Object.assign({}, lineChartDefault);\n                data.series = [{\n                    name: M.util.get_string('courseactivitystatus-submissions', 'local_edwiserreports'),\n                    data: response.submissions,\n                }, {\n                    name: M.util.get_string('courseactivitystatus-completions', 'local_edwiserreports'),\n                    data: response.completions,\n                }];\n                data.xaxis.categories = response.dates.map(date => date * 86400000);\n                data.chart.toolbar.show = response.dates.length > 29;\n                data.chart.zoom.enabled = response.dates.length > 29;\n                data.tooltip.y.title.formatter = null;\n                common.insight(SELECTOR.INSIGHT, response.insight);\n                renderGraph($(SELECTOR.PANEL).find(SELECTOR.GRAPH), data);\n            }).fail(function(exception) {\n                common.loader.hide(SELECTOR.PANEL);\n            });\n    }\n\n    /**\n     * Reload filters.\n     */\n    function reloadFilter(types) {\n        common.loader.show(SELECTOR.PANEL);\n        common.reloadFilter(\n            SELECTOR.PANEL,\n            types,\n            filter.cohort,\n            filter.course,\n            filter.group,\n            function() {\n                loadGraph();\n            });\n    }\n\n    /**\n     * Initialize events.\n     */\n    function initEvents() {\n        // Date selector listener.\n        common.dateChange(function(date) {\n            filter.date = date;\n            loadGraph();\n        });\n\n        // Cohort selector listener.\n        $('body').on('change', `${SELECTOR.PANEL} ${SELECTOR.COHORT}`, function() {\n            filter.cohort = parseInt($(this).val());\n            filter.course = 0;\n            filter.group = 0;\n            filter.student = 0;\n            reloadFilter(['course', 'group', 'student']);\n        });\n\n        // Course selector listener.\n        $('body').on('change', `${SELECTOR.PANEL} ${SELECTOR.COURSE}`, function() {\n            filter.course = parseInt($(this).val());\n            filter.group = 0;\n            filter.student = 0;\n            reloadFilter(['group', 'student']);\n\n        });\n\n        // Group selector listener.\n        $('body').on('change', `${SELECTOR.PANEL} ${SELECTOR.GROUP}`, function() {\n            filter.group = parseInt($(this).val());\n            filter.student = 0;\n            reloadFilter(['student']);\n        });\n\n        // Student selector listener.\n        $('body').on('change', `${SELECTOR.PANEL} ${SELECTOR.STUDENT}`, function() {\n            filter.student = parseInt($(this).val());\n            // Load graph data.\n            loadGraph();\n        });\n\n        // Export to PDF.\n        $(document).on(EdwiserReportsEvents.EXPORTGRAPHPDF + '-' + blockName, function() {\n            let graphElement = $(SELECTOR.PANEL).find('.apexcharts-canvas');\n            common.exportGraphPDF(chart, filter, graphElement.width(), graphElement.height());\n        });\n\n        // Export to JPEG.\n        $(document).on(EdwiserReportsEvents.EXPORTGRAPHJPEG + '-' + blockName, function() {\n            common.exportGraphJPEG(chart, filter);\n        });\n\n        // Export to PNG.\n        $(document).on(EdwiserReportsEvents.EXPORTGRAPHPNG + '-' + blockName, function() {\n            common.exportGraphPNG(chart, filter);\n        });\n\n        // Export to SVG.\n        $(document).on(EdwiserReportsEvents.EXPORTGRAPHSVG + '-' + blockName, function() {\n            common.exportGraphSVG(chart, filter);\n        });\n    }\n\n    /**\n     * Initialize\n     * @param {function} invalidUser Callback function\n     * @param {String}   currentDate Current active date\n     */\n    function init(invalidUser, currentDate) {\n\n        // Assigning current date.\n        filter.date = currentDate;\n\n        if (!$(SELECTOR.PANEL).length) {\n            return;\n        }\n\n        $(SELECTOR.PANEL).find('.singleselect').select2();\n        common.handleFilterSize(SELECTOR.PANEL);\n        initEvents();\n        loadGraph(invalidUser);\n    }\n\n    /**\n     * Download grade block's graph in specified format.\n     *\n     * @param {String} format   Format of downloading file\n     * @param {String} filename Name of file\n     * @param {String} data     Exported data\n     */\n    function download(format, filename, response) {\n        let data = Object.assign({}, lineChartDefault);\n        data.series = [{\n            name: M.util.get_string('courseactivitystatus-submissions', 'local_edwiserreports'),\n            data: response.submissions,\n        }, {\n            name: M.util.get_string('courseactivitystatus-completions', 'local_edwiserreports'),\n            data: response.completions,\n        }];\n        data.xaxis.categories = response.dates.map(date => date * 86400000);\n        data.chart.toolbar.show = false;\n        data.tooltip = {\n            enabled: false\n        };\n        data.chart.animations = {\n            enabled: false\n        };\n        renderGraph($(SELECTOR.PANEL).find(SELECTOR.GRAPH), data);\n\n        switch (format) {\n            case 'pdfimage':\n                let graphElement = $(SELECTOR.PANEL).find(SELECTOR.GRAPH);\n                common.exportGraphPDF(chart, filter, graphElement.width(), graphElement.height(), filename);\n                break;\n            case 'jpeg':\n                common.exportGraphJPEG(chart, filter, filename);\n                break;\n            case 'png':\n                common.exportGraphPNG(chart, filter, filename);\n                break;\n            case 'svg':\n                common.exportGraphSVG(chart, filter, filename);\n                break;\n        }\n    }\n\n    // Must return the init function\n    return {\n        init: init,\n        download: download\n    };\n});"],"file":"courseactivitystatus.min.js"}
