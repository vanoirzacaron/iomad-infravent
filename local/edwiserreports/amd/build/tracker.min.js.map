{"version":3,"sources":["tracker.js"],"names":["define","$","Ajax","Notification","CFG","PROMISES","IS_INSTALLED","ajax","url","requestUrl","type","requestType","dataType","requestDataType","data","action","GET_TRACKING_DETAILS","contextid","call","methodname","args","KEEP_ALIVE","time","id","ticker","frequency","updateTime","startTimers","setInterval","_init","M","cfg","done","response","status","window","addEventListener","event","clearInterval","document","visibilityState","fail","exception","init","undefined","installed","require","tracker"],"mappings":"AAAA,aAEAA,OAAO,CAAC,SAAU,YAAa,oBAAqB,mBAAoB,SAAUC,EAAGC,EAAMC,EAAcC,GAIvG,IAAIC,EAAW,CAKbC,aAAc,WACZ,OAAOL,EAAEM,KAAK,CACZC,IAAKJ,EAAIK,WACTC,KAAMN,EAAIO,YACVC,SAAUR,EAAIS,gBACdC,KAAM,CACJC,OAAQ,wBASdC,qBAAsB,SAA8BC,GAClD,OAAOf,EAAKgB,KAAK,CAAC,CAChBC,WAAY,4CACZC,KAAM,CACJH,UAAWA,MAEX,IAMNI,WAAY,SAAoBC,GAC9B,OAAOpB,EAAKgB,KAAK,CAAC,CAChBC,WAAY,kCACZC,KAAM,CACJG,GAAIA,EACJD,KAAMA,MAEN,GAAM,GAAO,GAAM,KAOvBC,EAAK,KAKLC,EAAS,KAKTF,EAAO,EAKPG,EAAY,KAKhB,SAASC,IACI,OAAPH,GAAwB,IAATD,IAGnBjB,EAASgB,WAAWC,GACpBA,EAAO,GAMT,SAASK,IACI,OAAPJ,IAKJC,EAASI,YAAY,aACnBN,GACYG,GACVC,KAED,MA2BL,SAASG,IACPxB,EAASW,qBAAqBc,EAAEC,IAAId,WAAWe,KAAK,SAAUC,IACpC,IAApBA,EAASC,SAKbX,EAAKU,EAASV,GAGdE,EAAYQ,EAASR,UAjCvBU,OAAOC,iBAAiB,eAAgB,SAAUC,GAChDX,IACAY,cAAcd,KAIhBe,SAASH,iBAAiB,mBAAoB,SAAUC,GACtB,WAA5BE,SAASC,gBACXb,IAEAW,cAAcd,KAKc,WAA5Be,SAASC,iBACXb,OAqBCc,KAAKtC,EAAauC,WAEvB,MAAO,CACLC,KAAM,gBAEwBC,IAAxBT,OAAkB,YAGtBA,OAAkB,WAAI,EACtB9B,EAASC,eAAe0B,KAAK,SAAUC,GACjCA,EAASY,WACXhB,WAMVM,OAAOC,iBAAiB,OAAQ,WAC9BU,QAAQ,CAAC,gCAAiC,SAAUC,GAClDA,EAAQJ,WAET","sourcesContent":["define([\n    'jquery',\n    'core/ajax',\n    'core/notification',\n    './defaultconfig'\n], function(\n    $,\n    Ajax,\n    Notification,\n    CFG\n) {\n\n    /**\n     * All ajax promises.\n     */\n    let PROMISES = {\n\n        /**\n         * Check if plugin is installed.\n         * @returns {PROMISE}\n         */\n        IS_INSTALLED: function() {\n            return $.ajax({\n                url: CFG.requestUrl,\n                type: CFG.requestType,\n                dataType: CFG.requestDataType,\n                data: {\n                    action: 'is_installed_ajax'\n                },\n            });\n        },\n\n        /**\n         * Fetch tracking details using context id.\n         * @param {Integer} contextid Current page context id\n         * @returns {PROMISE}\n         */\n        GET_TRACKING_DETAILS: function(contextid) {\n            return Ajax.call([{\n                methodname: 'local_edwiserreports_get_tracking_details',\n                args: {\n                    contextid: contextid\n                }\n            }])[0];\n        },\n\n        /**\n         * Send keep alive request for current activity.\n         * @returns {PROMISE}\n         */\n        KEEP_ALIVE: function(time) {\n            return Ajax.call([{\n                methodname: 'local_edwiserreports_keep_alive',\n                args: {\n                    id: id,\n                    time: time\n                }\n            }], true, false, true)[0];\n        }\n    };\n\n    /**\n     * Time tracking id.\n     */\n    let id = null;\n\n    /**\n     * Seconds Ticker variable.\n     */\n    let ticker = null;\n\n    /**\n     * Global variable which keeps track of time.\n     */\n    let time = 0;\n\n    /**\n     * Time tracking frequency.\n     */\n    let frequency = null;\n\n    /**\n     * Update spend time to db.\n     */\n    function updateTime() {\n        if (id === null || time === 0) {\n            return;\n        }\n        PROMISES.KEEP_ALIVE(time);\n        time = 0;\n    }\n\n    /**\n     * Start timers.\n     */\n    function startTimers() {\n        if (id === null) {\n            return;\n        }\n\n        // Seconds Increament.\n        ticker = setInterval(function() {\n            time++;\n            if (time >= frequency) {\n                updateTime();\n            }\n        }, 1000);\n    }\n\n    function intiEvents() {\n\n        // Update time on page close/unload.\n        window.addEventListener('beforeunload', function(event) {\n            updateTime();\n            clearInterval(ticker);\n        });\n\n        // Handling tab visibility.\n        document.addEventListener(\"visibilitychange\", (event) => {\n            if (document.visibilityState == \"visible\") {\n                startTimers();\n            } else {\n                clearInterval(ticker);\n            }\n        });\n\n        // Start the initial timers.\n        if (document.visibilityState == \"visible\") {\n            startTimers();\n        }\n    }\n\n    /**\n     * Initialize\n     */\n    function init() {\n        PROMISES.GET_TRACKING_DETAILS(M.cfg.contextid)\n            .done(function(response) {\n                if (response.status === false) {\n                    return;\n                }\n\n                // Current tracking id.\n                id = response.id;\n\n                // Frequency.\n                frequency = response.frequency;\n\n                // Initialize events listener.\n                intiEvents();\n\n            }).fail(Notification.exception);\n    }\n    return {\n        init: function() {\n            // Dirty hack to skip multiple initialization.\n            if (window['timerinit'] !== undefined) {\n                return;\n            }\n            window['timerinit'] = true;\n            PROMISES.IS_INSTALLED()\n                .done(function(response) {\n                    if (response.installed) {\n                        init();\n                    }\n                });\n        }\n    };\n});\n\nwindow.addEventListener('load',\n    function() {\n        require(['local_edwiserreports/tracker'], function(tracker) {\n            tracker.init();\n        });\n    }, false\n);"],"file":"tracker.min.js"}